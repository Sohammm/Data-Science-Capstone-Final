selectInput(inputId = "y",
label = "Choose Y",
choices = c('SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth'),
selected = "SepalWidth")
),
mainPanel(
showOutput("myChart", "polycharts")
)
))
require(reshape2)
require(rCharts)
data(data.1, package = "ggplot2")
econ <- transform(data.1, date = as.character(Time))
m1 <- mPlot(x = "Arisk", y = c("HeartRate", "SystolicBP"), type = "Line", data = case.1)
m1$set(pointSize = 0, lineWidth = 1)
m1$save('fig/m1.html', cdn = TRUE)
cat('<iframe src="fig/m1.html" width=100%, height=600></iframe>')
data(data.1, package = "ggplot2")
econ <- transform(data.1, date = as.character(Time))
data.1
read.csv("case.1")
setwd("~/Desktop")
case.1<-read.csv("case.1.csv")
econ <- transform(data.1, date = as.character(Time))
econ <- transform(case.1, date = as.character(Time))
econ
m1 <- mPlot(x = "Arisk", y = c("HeartRate", "SystolicBP"), type = "Line", data = case.1)
m1
require(reshape2)
require(rCharts)
case.1<-read.csv("case.1.csv")
econ <- transform(case.1, date = as.character(Time))
m1 <- mPlot(x = "Arisk", y = c("HeartRate", "SystolicBP"), type = "Line", data = case.1)
m1$set(pointSize = 0, lineWidth = 1)
m1$save('fig/m1.html', cdn = TRUE)
cat('<iframe src="fig/m1.html" width=100%, height=600></iframe>')
case.1<-read.csv("case.1.csv")
econ <- transform(case.1, date = as.character(Time))
m1 <- mPlot(x = "Arisk", y = c("HeartRate", "SystolicBP"), type = "Line", data = case.1)
m1
m1
plot.ts(econ)
shiny::runApp('Anesthesia Project')
charlsons_icd10_codes_2_test[['DM.COMP']] = c('E102','E103','E104','E105','E107',
'E112','E113','E114','E115','E117',
'E122','E123','E124','E125','E127',
'E132','E133','E134','E135','E137',
'E142','E143','E144','E145','E147')
context("Check Charlson ICD-10 codes")
charlsons_icd10_codes_2_test <- list()
# Myocardial Infarction
charlsons_icd10_codes_2_test[['MI']] = c('I21','I22','I252')
# Congestive Heart Failure
charlsons_icd10_codes_2_test[['CHF']] = c('I43','I50','I099','I110','I130','I132',
'I255','I420','I425','I426','I427','I428','I429','P290')
# Periphral Vascular Disease
charlsons_icd10_codes_2_test[['PVD']] = c('I70','I71', 'I731','I738','I739','I771',
'I790','I792','K551','K558','K559','Z958','Z959')
# Cerebrovascular Disease
charlsons_icd10_codes_2_test[['CVD']] = c('G45','G46','I60','I61','I62','I63','I64','I65','I66','I67','I68','I69','H340')
# Dementia
charlsons_icd10_codes_2_test[['DEMENTIA']] = c('F00','F01','F02','F03','G30','F051','G311')
# Chronic Pulmonary Disease
charlsons_icd10_codes_2_test[['COPD']] = c('J40','J41','J42','J43','J44','J45','J46','J47',
'J60','J61','J62','J63','J64','J65','J66','J67',
'I278','I279','J684','J701','J703')
# Rheumatic Disease
charlsons_icd10_codes_2_test[['RHEUM']] = c('M05','M32','M33','M34','M06','M315','M351','M353','M360')
# Peptic Ulcer Disease
charlsons_icd10_codes_2_test[['PUD']] = c('K25','K26','K27','K28')
# Mild Liver Disease
charlsons_icd10_codes_2_test[['MILD.LIVER']] = c('B18','K73','K74','K700','K701','K702','K703','K709',
'K717','K713','K714','K715','K760','K762','K763','K764','K768','K769','Z944')
# Diabetes without complications
charlsons_icd10_codes_2_test[['DM']] = c('E100','E101','E106','E108','E109','E110','E111','E116','E118','E119',
'E120','E121','E126','E128','E129',
'E130','E131','E136','E138','E139',
'E140','E141','E146','E148','E149')
# Diabetes with complications
charlsons_icd10_codes_2_test[['DM.COMP']] = c('E102','E103','E104','E105','E107',
'E112','E113','E114','E115','E117',
'E122','E123','E124','E125','E127',
'E132','E133','E134','E135','E137',
'E142','E143','E144','E145','E147')
# Paraplegia and Hemiplegia
charlsons_icd10_codes_2_test[['PLEGIA']] = c('G81','G82','G041','G114','G801','G802',
'G830','G831','G832','G833','G834','G839')
# Renal Disease
charlsons_icd10_codes_2_test[['RENAL']] = c('N18','N19','N052','N053','N054','N055','N056','N057',
'N250','I120','I131','N032','N033','N034','N035','N036','N037',
'Z490','Z491','Z492','Z940','Z992')
# Cancer
charlsons_icd10_codes_2_test[['MALIGNANCY']] = c('C00','C01','C02','C03','C04','C05','C06','C07','C08','C09',
'C10','C11','C12','C13','C14','C15','C16','C17','C18','C19',
'C20','C21','C22','C23','C24','C25','C26',
'C30','C31','C32','C33','C34','C37','C38','C39',
'C40','C41','C43','C45','C46','C47','C48','C49',
'C50','C51','C52','C53','C54','C55','C56','C57','C58',
'C60','C61','C62','C63','C64','C65','C66','C67','C68','C69',
'C70','C71','C72','C73','C74','C75','C76',
'C81','C82','C83','C84','C85','C88',
'C90','C91','C92','C93','C94','C95','C96','C97')
# Moderate or Severe Liver Disease
charlsons_icd10_codes_2_test[['SEVERE.LIVER']] = c('K704','K711','K721','K729','K765','K766','K767','I850','I859','I864','I982')
# Metastatic Carcinoma
charlsons_icd10_codes_2_test[['METASTASIS']] = c('C77','C78','C79','C80')
# AIDS/HIV
charlsons_icd10_codes_2_test[['HIV']] = c('B20','B21','B22','B24')
test_that("Check Charlson matches to the regular expression Quan version",{
for (n in names(charlsons_icd10_codes_2_test)){
codes <- charlsons_icd10_codes_2_test[[n]]
# Check one code at the time
out <- t(sapply(codes,
function(code)
cmrbdt.finder.regex.charlson_Quan2005(icd_codes=code,
country_code = 'US',
icd_ver=10)))
found_codes <- out[,n]
expect_true(all(found_codes),
info=sprintf("The script fails to properly identify ICD-%s from '%s' the codes '%s'",
10,
n,
paste(codes[!found_codes],
collapse="', '")))
}
})
test_that("Check Charlson matches to the regular expression Quan version",{
for (n in names(charlsons_icd10_codes_2_test)){
codes <- charlsons_icd10_codes_2_test[[n]]
# Check one code at the time
out <- t(sapply(codes,
function(code)
cmrbdt.finder.regex.charlson_Quan2005(icd_codes=code,
country_code = 'US',
icd_ver=10)))
found_codes <- out[,n]
expect_true(all(found_codes),
info=sprintf("The script fails to properly identify ICD-%s from '%s' the codes '%s'",
10,
n,
paste(codes[!found_codes],
collapse="', '")))
test_that("Check Charlson matches to the regular expression Quan version",{
for (n in names(charlsons_icd10_codes_2_test)){
codes <- charlsons_icd10_codes_2_test[[n]]
# Check one code at the time
out <- t(sapply(codes,
function(code)
cmrbdt.finder.regex.charlson_Quan2005(icd_codes=code,
country_code = 'US',
icd_ver=10)))
found_codes <- out[,n]
expect_true(all(found_codes),
info=sprintf("The script fails to properly identify ICD-%s from '%s' the codes '%s'",
10,
n,
paste(codes[!found_codes],
collapse="', '")))
}
})
string = c("G1:E001", "G2:E002", G3:E003)
string
string
string = c("G1:E001", "G2:E002", G3:E003)
string = c("G1:E001", "G2:E002", "G3:E003")
string
string
sub(".*:", "", string)
read.csv("aa.csv")
aa<-read.csv("aa.csv")
aa
sub(".*:", "", aa)
str(aa)
sub("*:", "", aa)
sub("*", "", aa)
sub("*", "", aa)
aa
txt <- c("Albion","Clinical","Dervishi", "Hours")
if(length(i <- grep("foo", aa)))
cat("'foo' appears at least once in\n\t", aa, "\n")
i # 2 and 4
txt[i]
aa1 <- c("Albion","Clinical","Dervishi", "Hours")
if(length(i <- grep("foo", aa1)))
cat("'foo' appears at least once in\n\t", aa, "\n")
i # 2 and 4
txt[i]
install.packages("aplore3")
library("aplore3")
APS data
APS
dataset("APS")
ls(aplore3)
aps
str(aps)
burn1000
chdage
glow11m
glow_rand
icu
str(icu)
sd(5:10)
sd(3:10)
sd(4:10)
sd(15:30)
sd(15:30)
sd(15:30)
sd(1:15)
sd(5:20)
sd(1:15)
sd(5:10)
bn<-"i want to go in home"
bn<-'i want to go in home'
bn
length(bn)
inStr <- unlist(strsplit(bn, split=" "));
length(inStr )
length<-function(data){
b <- unlist(strsplit(bn, split=" "));
n<-length(b)
m<-n-1
m
}
length(bn)
length<-function(data){
b <- unlist(strsplit(data, split=" "));
n<-length(b)
m<-n-1
m
}
length(bn)
length(inStr)
lengthdd<-function(data){
b <- unlist(strsplit(data, split=" "));
n<-length(b)
m<-n-1
m
}
length(bn)
bn<-'i want to go in home'
inStr <- unlist(strsplit(bn, split=" "));
length(inStr )
setwd("~/Desktop/capstone final")
setwd("~/Desktop/Final Report")
setwd("~/Desktop/capstone final")
setwd("~/Desktop/Testing App")
application_test<-read.csv("app_testing.csv")
matching_funtion<- function(dataframe){
df <- dataframe[, sapply(dataframe, is.numeric)]
vdiff <- function(x){
y <- outer(x, x, "==")
min(abs(y[lower.tri(y)]))
}
return(apply(df, 1, vdiff))
}
matching<-matching_funtion(application_test)
matching<-as.factor(matching)
application_test<-cbind(application_test, matching )
summary(application_test)
application_test<-read.csv("app_testing.csv")
matching_funtion<- function(dataframe){
df <- dataframe[, sapply(dataframe, is.numeric)]
vdiff <- function(x){
y <- outer(x, x, "==")
min(abs(y[lower.tri(y)]))
}
return(apply(df, 1, vdiff))
}
matching<-matching_funtion(application_test)
matching<-as.factor(matching)
application_test<-cbind(application_test, matching )
summary(application_test)
application_test<-read.csv("app_testing.csv")
matching_funtion<- function(dataframe){
df <- dataframe[, sapply(dataframe, is.numeric)]
vdiff <- function(x){
y <- outer(x, x, "==")
min(abs(y[lower.tri(y)]))
}
return(apply(df, 1, vdiff))
}
matching<-matching_funtion(application_test)
matching<-as.factor(matching)
application_test<-cbind(application_test, matching )
summary(application_test)
library(klaR)
partimat(matching ~ ., data=application_test,method="lda")
application_test<-read.csv("app_testing.csv")
matching_funtion<- function(dataframe){
df <- dataframe[, sapply(dataframe, is.numeric)]
vdiff <- function(x){
y <- outer(x, x, "==")
min(abs(y[lower.tri(y)]))
}
return(apply(df, 1, vdiff))
}
matching<-matching_funtion(application_test)
matching<-as.factor(matching)
application_test<-cbind(application_test, matching )
summary(application_test)
application_test<-read.csv("app_testing.csv")
matching_funtion<- function(dataframe){
df <- dataframe[, sapply(dataframe, is.numeric)]
vdiff <- function(x){
y <- outer(x, x, "==")
min(abs(y[lower.tri(y)]))
}
return(apply(df, 1, vdiff))
}
matching<-matching_funtion(application_test)
matching<-as.factor(matching)
application_test<-cbind(application_test, matching )
summary(application_test)
star_approximation<-function( LDL5) {
star1<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==2 | LDL5[i] ==1 ) { LDL5 <-1
}
LDL5
}
star_one<-sapply(LDL5, star1)
star2<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==3 | LDL5[i] ==1 | LDL5[i] ==2) { LDL5 <- 2
}
LDL5
}
star_two<-sapply(LDL5, star2)
star3<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==4| LDL5[i] ==2 | LDL5[i] ==3) { LDL5 <- 3
}
LDL5
}
star_three<-sapply(LDL5, star3)
star4<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==4 | LDL5[i] ==3 | LDL5[i] ==5) { LDL5<- 4
}
LDL5
}
star_four<-sapply(star_two, star4)
star5<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if ( LDL5[i] ==4 |LDL5[i] ==5) { LDL5 <- 5
}
LDL5
}
star_five<-sapply(star_one, star5)
star_aprox<-c(star_three,  star_four, star_five)
star_aprox
}
Real.Star_approx<-star_approximation(application_test$ Real.Star)
Test.Star_approx<-star_approximation(application_test$ Test.Star)
aplication_test_approx<-cbind(Real.Star_approx, Test.Star_approx)
aplication_test_approx<-as.data.frame(aplication_test_approx)
matching_funtion<- function(dataframe){
df <- dataframe[, sapply(dataframe, is.numeric)]
vdiff <- function(x){
y <- outer(x, x, "==")
min(abs(y[lower.tri(y)]))
}
return(apply(df, 1, vdiff))
}
matching_approx<-matching_funtion(aplication_test_approx)
matching_approx<-as.factor(matching_approx)
aplication_test_approx<-cbind(aplication_test_approx, matching_approx)
summary(aplication_test_approx)
par(mfrow=c(1,2))
partimat(matching_approx ~ ., data=aplication_test_approx, method="lda")
application_test<-read.csv("app_testing.csv")
matching_funtion<- function(dataframe){
df <- dataframe[, sapply(dataframe, is.numeric)]
vdiff <- function(x){
y <- outer(x, x, "==")
min(abs(y[lower.tri(y)]))
}
return(apply(df, 1, vdiff))
}
matching<-matching_funtion(application_test)
matching<-as.factor(matching)
application_test<-cbind(application_test, matching )
summary(application_test)
star_approximation<-function( LDL5) {
star1<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==2 | LDL5[i] ==1 ) { LDL5 <-1
}
LDL5
}
star_one<-sapply(LDL5, star1)
star2<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==3 | LDL5[i] ==1 | LDL5[i] ==2) { LDL5 <- 2
}
LDL5
}
star_two<-sapply(LDL5, star2)
star3<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==4| LDL5[i] ==2 | LDL5[i] ==3) { LDL5 <- 3
}
LDL5
}
star_three<-sapply(LDL5, star3)
star4<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==4 | LDL5[i] ==3 | LDL5[i] ==5) { LDL5<- 4
}
LDL5
}
star_four<-sapply(star_two, star4)
star5<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if ( LDL5[i] ==4 |LDL5[i] ==5) { LDL5 <- 5
}
LDL5
}
star_five<-sapply(star_one, star5)
star_aprox<-c(star_three,  star_four, star_five)
star_aprox
}
Real.Star_approx<-star_approximation(application_test$ Real.Star)
Test.Star_approx<-star_approximation(application_test$ Test.Star)
aplication_test_approx<-cbind(Real.Star_approx, Test.Star_approx)
aplication_test_approx<-as.data.frame(aplication_test_approx)
matching_funtion<- function(dataframe){
df <- dataframe[, sapply(dataframe, is.numeric)]
vdiff <- function(x){
y <- outer(x, x, "==")
min(abs(y[lower.tri(y)]))
}
return(apply(df, 1, vdiff))
}
matching_approx<-matching_funtion(aplication_test_approx)
matching_approx<-as.factor(matching_approx)
aplication_test_approx<-cbind(aplication_test_approx, matching_approx)
summary(aplication_test_approx)
par(mfrow=c(1,2))
partimat(matching_approx ~ ., data=aplication_test_approx, method="lda")
application_test<-read.csv("app_testing.csv")
matching_funtion<- function(dataframe){
df <- dataframe[, sapply(dataframe, is.numeric)]
vdiff <- function(x){
y <- outer(x, x, "==")
min(abs(y[lower.tri(y)]))
}
return(apply(df, 1, vdiff))
}
matching<-matching_funtion(application_test)
matching<-as.factor(matching)
application_test<-cbind(application_test, matching )
summary(application_test)
star_approximation<-function( LDL5) {
star1<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==2 | LDL5[i] ==1 ) { LDL5 <-1
}
LDL5
}
star_one<-sapply(LDL5, star1)
star2<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==3 | LDL5[i] ==1 | LDL5[i] ==2) { LDL5 <- 2
}
LDL5
}
star_two<-sapply(LDL5, star2)
star3<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==4| LDL5[i] ==2 | LDL5[i] ==3) { LDL5 <- 3
}
LDL5
}
star_three<-sapply(LDL5, star3)
star4<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if (LDL5[i] ==4 | LDL5[i] ==3 | LDL5[i] ==5) { LDL5<- 4
}
LDL5
}
star_four<-sapply(star_two, star4)
star5<- function(LDL5){for (i in 1:length(LDL5))
if( is.na(LDL5[i])) { }
else if ( LDL5[i] ==4 |LDL5[i] ==5) { LDL5 <- 5
}
LDL5
}
star_five<-sapply(star_one, star5)
star_aprox<-c(star_three,  star_four, star_five)
star_aprox
}
Real.Star_approx<-star_approximation(application_test$ Real.Star)
Test.Star_approx<-star_approximation(application_test$ Test.Star)
aplication_test_approx<-cbind(Real.Star_approx, Test.Star_approx)
aplication_test_approx<-as.data.frame(aplication_test_approx)
matching_funtion<- function(dataframe){
df <- dataframe[, sapply(dataframe, is.numeric)]
vdiff <- function(x){
y <- outer(x, x, "==")
min(abs(y[lower.tri(y)]))
}
return(apply(df, 1, vdiff))
}
matching_approx<-matching_funtion(aplication_test_approx)
matching_approx<-as.factor(matching_approx)
aplication_test_approx<-cbind(aplication_test_approx, matching_approx)
summary(aplication_test_approx)
par(mfrow=c(1,2))
partimat(matching_approx ~ ., data=aplication_test_approx, method="lda")
setwd("~/Desktop/capstone final")
setwd("~/Desktop/xxx")
